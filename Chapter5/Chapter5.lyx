#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard

\series bold
Chapter 5: Navigation
\end_layout

\begin_layout Standard

\series bold
5.1.
 Reactive Navigation
\end_layout

\begin_layout Standard

\series bold
5.1.1.
 Braitenberg Vehicles
\end_layout

\begin_layout Standard
+ A very simple class of goal achieving robots are known as Braitenberg
 vehicles and are characterized by direct connection between sensors and
 motors.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename example_1.png
	lyxscale 64

\end_inset

Fig 5.1
\end_layout

\begin_layout Standard
+ We use two sensors, bilateral sensing, with one on each side of the robot’s
 body (green blocks).
 The value to be sensed:
\end_layout

\begin_layout Standard
\begin_inset Formula $sensor=200/((x-xc)^{2}+(y-yc)^{2}+200)$
\end_inset

 where 
\begin_inset Formula $(x,y)$
\end_inset

 is the sensor position and 
\begin_inset Formula $(xc,yc)$
\end_inset

 is the goal position, all in the worlf frame.
\end_layout

\begin_layout Standard
which returns the sensor value 
\begin_inset Formula $s(x,y)\in[0,1]$
\end_inset

.
\end_layout

\begin_layout Standard
+ The vehicle speed is:
\end_layout

\begin_layout Standard
\begin_inset Formula $v=2-s_{R}-s_{L}$
\end_inset

 where 
\begin_inset Formula $s_{R}$
\end_inset

 and 
\begin_inset Formula $s_{L}$
\end_inset

 are the right and left sensor reading.
 At the goal: 
\begin_inset Formula $s_{R}=s_{L}=1$
\end_inset

, the velocity becomes zero.
\end_layout

\begin_layout Standard
Steeing angle:
\end_layout

\begin_layout Standard
\begin_inset Formula $\gamma=k\left(s_{R}-s_{L}\right)$
\end_inset


\end_layout

\begin_layout Standard

\series bold
5.1.2.
 Simple Automata
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename example_2.png
	lyxscale 75

\end_inset

 Fig 5.2
\end_layout

\begin_layout Standard
+ The bug algorithm (green line).
 Obstacles are indicated by red pixels.
\end_layout

\begin_layout Standard

\series bold
5.2.
 Map-Based Planning
\end_layout

\begin_layout Standard
+ The key to achieving the best path between points A and B is to use a
 map.
\end_layout

\begin_layout Standard

\series bold
5.2.1.
 Distance Transform
\end_layout

\begin_layout Standard
+ The plan is the distance map.
 Wherever the robot starts, it moves to the neighboring cell that has the
 smallest distance to the goal.
 The process is repeated until the robot reaches a cell with a distance
 value of zero which is the goal.
\end_layout

\begin_layout Standard
+ The distance between two point 
\begin_inset Formula $(x_{1},y_{1})$
\end_inset

 and 
\begin_inset Formula $(x_{2},y_{2})$
\end_inset

 where 
\begin_inset Formula $\Delta_{x}=x_{2}-x_{1}$
\end_inset

 and 
\begin_inset Formula $\Delta_{y}=y_{2}-y_{1}$
\end_inset

can be Euclidean distance 
\begin_inset Formula $\sqrt{\Delta_{x}^{2}+\Delta_{y}^{2}}$
\end_inset

or CityBlock distance 
\begin_inset Formula $\text{\left|\Delta_{x}\right|+\left|\Delta_{y}\right|}$
\end_inset


\end_layout

\begin_layout Standard

\series bold
5.2.2.
 D*
\end_layout

\begin_layout Standard
+ A popular algorithm for robot path planning is D∗ which fi nds the best
 path.
\end_layout

\begin_layout Standard
+ D* has a number of features that are useful for real-world applications.
\end_layout

\begin_layout Standard
- Firstly, it generalizes the occupancy grid to a cost map which represents
 the cost 
\begin_inset Formula $c\in\mathbb{R},c>0$
\end_inset

 of traversing each cell in the horizontal or vertical direction.
 The cost of traversing the cell diagonally is 
\begin_inset Formula $c\sqrt{2}$
\end_inset

.
 For cells corresponding to obstacles 
\begin_inset Formula $c=\infty$
\end_inset

 (
\begin_inset Formula $Inf$
\end_inset

 in MATLAB).
\end_layout

\begin_layout Standard
- Secondly, D* supports incremental replanning.
 This is important if, while we are moving, we discover that the world is
 different to our map.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename example_3.png
	lyxscale 75

\end_inset

 Fig 5.3
\end_layout

\begin_layout Standard

\series bold
5.2.3.
 Introduction to Roadmap Method
\end_layout

\begin_layout Standard
+ In robotic path planning the analysis of the map is referred to as the
 
\emph on
planning phase.
\end_layout

\begin_layout Standard
+ The 
\emph on
query phase
\emph default
 uses the result of the planning phase to find a path from A to B.
 
\end_layout

\begin_layout Standard
+ The disparity in planning and query costs has led to the development of
 roadmap methods where the query can include both the start and goal positions.
\end_layout

\begin_layout Standard

\series bold
5.2.4.
 Probabilistic Roadmap Method (PRM)
\end_layout

\begin_layout Standard
+ The high computational cost of the distance transform and skeletonization
 methods makes them infeasible for large maps and has led to the development
 of probabilistic methods.
\end_layout

\begin_layout Standard
+ These methods sparsely sample the world map and the most well known of
 these methods is the probabilistic roadmap or PRM method.
\end_layout

\begin_layout Standard
+ The query phase finds a path from the start point to the goal.
 This is simply a matter of moving to the closest node in the roadmap (the
 start node), following a minimum cost A* route through the roadmap, getting
 off at the node closest to the goal and then traveling to the goal.
\end_layout

\begin_layout Standard
+ There are some important tradeoffs in achieving this computational efficiency.
\end_layout

\begin_layout Standard
- Firstly, the underlying random sampling of the free space means that a
 different roadmap is created every time the planner is run, resulting in
 different paths and path lengths.
\end_layout

\begin_layout Standard
- Secondly, the planner can fail by creating a network consisting of disjoint
 components.
\end_layout

\begin_layout Standard
- Thirdly, long narrow gaps between obstacles such as corridors are unlikely
 to be exploited since the probability of randomly choosing points that
 lie along such spaces is very low.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename example_4.png
	lyxscale 80

\end_inset

 Fig 5.4
\end_layout

\begin_layout Standard

\series bold
5.2.5.
 Lattice Planner
\end_layout

\begin_layout Standard
+ The planners take into account the motion model of the vehicle, and the
 robot is capable of omnidirectional motion.
\end_layout

\begin_layout Standard
+ Each path is an arc which requires a constant steering wheel setting and
 the arc radius is chosen so that at the end of each arc the robot’s heading
 direction is some multiple of 
\begin_inset Formula $\pi/2$
\end_inset

 radians.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename example_5.png
	lyxscale 75

\end_inset

 Fig 5.5
\end_layout

\begin_layout Standard
+ The Lattice planner with 1 (a),2 (b) and 8 (c) iterations.
\end_layout

\begin_layout Standard

\series bold
5.2.6.
 Rapidly-Exploring Random Tree (RRT)
\end_layout

\begin_layout Standard
+ RRT takes into acccount the motion model of the vehicle and uses probabilistic
 methods like the PRM planner.
\end_layout

\begin_layout Standard
+ The paths are computed over a fi xed time interval for discrete values
 of velocity, forward or backward, and various steering angles.
 
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename example_6.png

\end_inset

 Fig 5.6
\end_layout

\begin_layout Standard
+ The main steps in creating an RRT are as follows, with the notation shown
 in Fig 5.6.
 A graph of robot configurations is maintained and each node is a configuration
 
\begin_inset Formula $\boldsymbol{q}\in\mathbb{R}^{2}\times\mathbb{S}^{1}$
\end_inset

 which is represented by a 3-vector 
\begin_inset Formula $\boldsymbol{q}\sim\left(x,y,\theta\right)$
\end_inset

.
 The first, or root, node in the graph is the goal configuration of the
 robot.
 A random configuration 
\begin_inset Formula $\boldsymbol{q}_{rand}$
\end_inset

 is chosen, and the node with the closest configuration 
\begin_inset Formula $\boldsymbol{q}_{near}$
\end_inset

 is found – this configuration is near in terms of a cost function that
 includes distance and orientation.
 A control is computed that moves the robot from 
\begin_inset Formula $\boldsymbol{q}_{near}$
\end_inset

 toward 
\begin_inset Formula $\boldsymbol{q}_{rand}$
\end_inset

 over a fixed path simulation time.
 The configuration that it reaches is 
\begin_inset Formula $\boldsymbol{q}_{new}$
\end_inset

 and this is added to the graph.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename example_7.png
	lyxscale 80

\end_inset

 Fig 5.7
\end_layout

\begin_layout Standard
+ The random tree is shown in Fig.
 5.7 and we see that the paths have a good coverage of the configuration
 space, not just in the x- and y-directions but also in orientation, which
 is why the algorithm is known as
\emph on
 rapidly exploring
\emph default
.
\end_layout

\begin_layout Standard
+ Some important points about the RRT.
\end_layout

\begin_layout Standard
- Firstly, as for the PRM planner, there may be some distance (and orientation)
 between the start and goal configuration and the nearest node.
 Minimizing this requires tuning RRT parameters such as the number of nodes
 and path simulation time.
\end_layout

\begin_layout Standard
- Secondly, the path is feasible but not quite optimal.
\end_layout

\end_body
\end_document
